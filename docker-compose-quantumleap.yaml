# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.4.3
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
version: '3'
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.4.3}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__SCHEDULER__SCHEDULER_HEARTBEAT_SEC: 1
    AIRFLOW__TRIGGERER__JOB_HEARTBEAT_SEC: 1
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins

  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy
  networks:
    - amnet

services:
  
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - amnet


  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8888:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      amnet:
        ipv4_address: 182.18.1.31

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      amnet:
        ipv4_address: 182.18.1.32


  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      amnet:
        ipv4_address: 182.18.1.33

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        #chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - .:/sources
    networks:
      - amnet

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    networks:
      amnet:
        ipv4_address: 182.18.1.34
   

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    extra_hosts:
      - "kafka:182.18.1.13"
    logging:
      options:
          max-size : "200m"
    networks:
      amnet:
        ipv4_address: 182.18.1.13

  kafka:
    image: wurstmeister/kafka:2.12-2.4.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    expose:
      - "9093"
    logging:
      options:
          max-size : "200m"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 182.18.1.12
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://136.243.156.113:9092
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: 
    extra_hosts:
      - "zookeeper:182.18.1.13"
      - "kafka:182.18.1.12"
    networks:
      amnet:
        ipv4_address: 182.18.1.12
        
 
  quantumleap:
    image: orchestracities/quantumleap:${QL_VERSION:-latest}
    ports:
      - "8668:8668"
    depends_on:      
      - crate
    environment:
      - CRATE_HOST=${CRATE_HOST:-crate}
      - USE_GEOCODING=True
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOGLEVEL=DEBUG
      - TZ=Europe/Rome 
    logging:
      options:
          max-size : "200m"
    networks:
      amnet:
        ipv4_address: 182.18.1.19
             
        
  crate:
    image: crate:${CRATE_VERSION:-4.6.7}
    command: crate -Cauth.host_based.enabled=false
      -Ccluster.name=democluster -Chttp.cors.enabled=true -Chttp.cors.allow-origin="*"
    environment:
      - LOG4J_FORMAT_MSG_NO_LOOKUPS=true
    depends_on:
      - timescale
      - redis
    ports:
      # Admin UI
      - "4200:4200"
      # Transport protocol
      - "4300:4300"
    volumes:
      - cratedata:/data
    logging:
      options:
          max-size : "200m"
    networks:
      hostnet:
      amnet:
        ipv4_address: 182.18.1.24



  timescale:
    image: timescale/timescaledb-postgis:${TIMESCALE_VERSION:-2.3.0-pg13}
    ports:
      - "5432:5432"
      # Don't expose container port 5432 with the same number outside of the
      # swarm. In the Travis test env, there's already a PG instance running
      # on port 5432!
    environment:
      - POSTGRES_PASSWORD=*
    logging:
      options:
          max-size : "200m"


  redis:
    image: redis:${REDIS_VERSION:-6.2.3}
    logging:
      options:
          max-size : "200m"
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
      
      
  orion:
    hostname: orion
    image: fiware/orion-ld:0.7.0
    networks:
      - hostnet
      - amnet
    ports:
      - "1026:1026"
    depends_on:
      - orion_mongo
    command: -statCounters -dbhost orion_mongo -logLevel INFO -forwarding
    restart: always
    
    
  orion_mongo:
    hostname: orion_mongo
    image: mongo:4.4
    networks:
      - amnet
    ports:
      - "27017:27017"
    volumes:
      - orion_mongo_data:/data/db
      - orion_mongo_conf:/data/configdb
    command: --nojournal
 


# Keyrock is an Identity Management Front-End
#  idm:
#    image: fiware/idm:${KEYROCK_VERSION}
#    container_name: fiware-idm
#    hostname: idm
#    networks:
#      default:
#        ipv4_address: ${KEYROCK_IP}
#    depends_on:
#      - mysql-db
#    ports:
#      - "${KEYROCK_PORT}:${KEYROCK_PORT}" # localhost:3005
#    expose:
#      - "${KEYROCK_PORT}"
#    environment:
#      - DEBUG=idm:*
#      - IDM_DB_HOST=mysql-db
#      - IDM_DB_PASS_FILE=/run/secrets/my_secret_data
#      - IDM_DB_USER=root
#      - IDM_HOST=http://localhost:${KEYROCK_PORT}
#      - IDM_PORT=${KEYROCK_PORT}
#      - IDM_HTTPS_ENABLED=${IDM_HTTPS_ENABLED}
#      - IDM_HTTPS_PORT=${KEYROCK_HTTPS_PORT}
#      - IDM_ADMIN_USER=Alice
#      - IDM_ADMIN_EMAIL=alice-the-admin@test.com
#      - IDM_ADMIN_PASS=test
      # - IDM_EIDAS_ENABLED=true                               # Enable IdM to allow user authentication in services using their eID (true,false)
      # - IDM_EIDAS_GATEWAY_HOST=localhost                     # Name of the host in which IdM is running
      # - IDM_EIDAS_NODE_HOST=https://eidas.node.es/EidasNode  # Name of the host in which is running node eIDAS Service
      # - IDM_EIDAS_METADATA_LIFETIME=31536000                 # Lifetime of metadata of a service with eIDAS authentication enabled in seconds (1 year)
#    secrets:
#      - my_secret_data
#    healthcheck:
#      test: curl --fail -s http://localhost:${KEYROCK_PORT}/version || exit 1

  # PEP Proxy for Orion
#  orion-pep-proxy:
#    image: fiware/pep-proxy:${WILMA_VERSION}
#    container_name: fiware-orion-pep-proxy
#    hostname: orion-pep-proxy
#    networks:
#      default:
#        ipv4_address: ${ORION_PROXY_IP}
#    depends_on:
#      - idm
#    deploy:
#      restart_policy:
#        condition: on-failure
#    ports:
#      - "${ORION_PROXY_PORT}:${ORION_PROXY_PORT}" # localhost:1027
#    expose:
#      - "${ORION_PROXY_PORT}"
#    environment:
#      - DEBUG=pep-proxy:*
#      - PEP_PROXY_DEBUG=true
#      - PEP_PROXY_APP_HOST=orionld
#      - PEP_PROXY_APP_PORT=${ORION_LD_PORT}
#      - PEP_PROXY_PORT=${ORION_PROXY_PORT}
#      - PEP_PROXY_IDM_HOST=idm
#      - PEP_PROXY_HTTPS_ENABLED=false
#      - PEP_PROXY_AUTH_ENABLED=true
#      - PEP_PROXY_IDM_SSL_ENABLED=false
#      - PEP_PROXY_IDM_PORT=${KEYROCK_PORT}
#      - PEP_PROXY_APP_ID=${PEP_PROXY_APP_ID}
#      - PEP_PROXY_USERNAME=${PEP_PROXY_USERNAME}
#      - PEP_PASSWORD=${PEP_PASSWORD}
#      - PEP_PROXY_PDP=idm
#      - PEP_PROXY_MAGIC_KEY=1234
#      - PEP_PROXY_PUBLIC_PATHS=/version
#    healthcheck:
#      test: curl --fail -s http://orion-pep-proxy:${ORION_PROXY_PORT}/version || exit 1

        
networks:
  hostnet:
  amnet:
    ipam:
      config:
        - subnet: 182.18.1.0/24
  
  

volumes:
  postgres-db-volume:
  cratedata:
  redisdata:
  orion_mongo_data:
  orion_mongo_conf:
