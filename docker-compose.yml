name: s-x-aipi-service

networks:
  s-x-aipi:
    driver: bridge

volumes:
  redpanda-0: null

services:

  redpanda-0:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:19092,external://0.0.0.0:9092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-0:19092,external://localhost:9092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.9
    container_name: redpanda-0
    volumes:
      - redpanda-0:/var/lib/redpanda/data
    networks:
      - s-x-aipi
    ports:
      - "18081:18081"
      - "18082:18082"
      - "9092:9092"
      - "19644:9644"


  redpanda-console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.4.5
    networks:
      - s-x-aipi
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-0:19092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-0:9644"]
    ports:
      - "8090:8080"
    depends_on:
      - redpanda-0

  s-x-aipi-orion-catcher:
    container_name: s-x-aipi-orion-catcher
    image: ghcr.io/engineering-research-and-development/s-x-aipi-autonomic-manager:orion_catcher
    networks:
      - s-x-aipi
    environment:
       KAFKA-BROKER: redpanda-0:19092
       ORION-CONFIG: "orion_catcher/solution_configs"
    command:
      - "uvicorn"
      - "orion_catcher.main:orion_catcher"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "8001"
    ports:
      - "8001:8001"
    expose:
      - "8001"
    depends_on:
      redpanda-0:
        condition: service_started
    healthcheck:
      test: wget --no-verbose -O /dev/null --tries=1 http://localhost:8001/healthcheck || exit 1
      interval: 30s
      timeout: 5s
    #volumes:
    #  - ./solution_configs:/orion_catcher/additional_solution_configs

  dagster_webservice:
    container_name: dagster_webserver
    image: ghcr.io/engineering-research-and-development/s-x-aipi-autonomic-manager:dagster_service
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
    expose:
      - "3000"
    ports:
      - "3000:3000"
    volumes: # Make docker client accessible, so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - s-x-aipi

  quantumleap:
    image: orchestracities/quantumleap:latest
    ports:
      - "8668:8668"
    depends_on:
      - crate
    networks:
      - s-x-aipi
    environment:
      - CRATE_HOST=${CRATE_HOST:-crate}
      - USE_GEOCODING=True
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOGLEVEL=DEBUG
      - TZ=Europe/Rome
    logging:
      options:
        max-size: "200m"

  crate:
    image: crate:latest
    command: crate -Cauth.host_based.enabled=false
      -Ccluster.name=democluster -Chttp.cors.enabled=true -Chttp.cors.allow-origin="*"
    environment:
      - LOG4J_FORMAT_MSG_NO_LOOKUPS=true
    depends_on:
      - timescale
      - redis
    networks:
      - s-x-aipi
    ports:
      # Admin UI
      - "4200:4200"
      # Transport protocol
      - "4300:4300"
    logging:
      options:
        max-size: "200m"

  timescale:
    image: timescale/timescaledb-ha:pg16-all-amd64
    environment:
      POSTGRES_PASSWORD: s-x-aipi
    ports:
      - "54321:5432"
    networks:
      - s-x-aipi
    logging:
      options:
        max-size: "200m"

  redis:
    image: redis:latest
    logging:
      options:
        max-size: "200m"
    ports:
      - "6379:6379"
    networks:
      - s-x-aipi