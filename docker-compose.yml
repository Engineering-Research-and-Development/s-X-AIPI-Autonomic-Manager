version: "3.7"
name: s-x-aipi-service

networks:
  s-x-aipi:
    driver: bridge

volumes:
  redpanda-0: null
  postgres-db-volume:

services:

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: s-x-aipi
      POSTGRES_PASSWORD: s-x-aipi
      POSTGRES_DB: s-x-aipi
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    restart: always
    networks:
      - s-x-aipi


  redpanda-0:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.9
    container_name: redpanda-0
    volumes:
      - redpanda-0:/var/lib/redpanda/data
    networks:
      - s-x-aipi
    ports:
      - "18081:18081"
      - "18082:18082"
      - "19092:19092"
      - "19644:9644"


  redpanda-console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.4.5
    networks:
      - s-x-aipi
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-0:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-0:9644"]
    ports:
      - "8090:8080"
    depends_on:
      - redpanda-0

  s-x-aipi-orion-catcher:
    container_name: s-x-aipi-orion-catcher
    build: src
    networks:
      - s-x-aipi
    environment:
       KAFKA-BROKER: redpanda-0:9092
       ORION-CONFIG: "orion_catcher/solutions_config.yml"
    command:
      - "uvicorn"
      - "orion_catcher.main:orion_catcher"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "8001"
    ports:
      - "8001:8001"
    expose:
      - "8001"
    depends_on:
      - redpanda-0


  # This service runs dagster_service-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster_service-daemon.
  dagster_webservice:
    build:
      context: .
      dockerfile: src/dagster_service/Dockerfile_dagster
    container_name: dagster_webserver
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: s-x-aipi
      DAGSTER_POSTGRES_PASSWORD: s-x-aipi
      DAGSTER_POSTGRES_DB: s-x-aipi
    volumes: # Make docker client accessible, so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - s-x-aipi
    depends_on:
      - postgres

  # This service runs the dagster_service-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_daemon:
    build:
      context: .
      dockerfile: src/dagster_service/Dockerfile_dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: s-x-aipi
      DAGSTER_POSTGRES_PASSWORD: s-x-aipi
      DAGSTER_POSTGRES_DB: s-x-aipi
    volumes: # Make docker client accessible, so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - s-x-aipi
    depends_on:
      - postgres